model = Sequential([ - Tworzymy pusty model secuencyjny za pomocą biblioteki Keras.
layers.Rescaling(1. / 255, input_shape=(img_height, img_width, 3)), - Tworzy warstwę, która skaluje każdy piksel obrazu do zakresu [0, 1], biorąc jako input obrazy o wymiarach img_height i img_width, z trzema kanałami (kolor RGB).
layers.Conv2D(16, 3, padding='same', activation='relu'), - Tworzy warstwę konwolucyjną, która będzie wykonywać filtrowanie i transformację obrazu przez użycie 16 filtrów o rozmiarze 3x3. Opcja padding='same' oznacza, że każdy obraz wejściowy będzie zapętlany tak, aby jego wymiary nie uległy zmianie. Funkcja aktywacji relu jest używana do zapewnienia, że każda wartość ujemna jest zamieniana na 0.
layers.MaxPooling2D(), - Tworzy warstwę max pooling, która będzie wykonywać operację redukcji rozmiaru, wybierając maksymalne wartości z kwadratów o określonym rozmiarze. Domyślnie rozmiar puli jest ustawiony na 2x2.
layers.Conv2D(32, 3, padding='same', activation='relu'), - Kolejna warstwa konwolucyjna, z 32 filtrami o rozmiarze 3x3 i funkcją aktywacji relu.
layers.MaxPooling2D(), - Kolejna warstwa max pooling.
layers.Conv2D(64, 3, padding='same', activation='relu'), - Jeszcze jedna warstwa konwolucyjna, z 64 filtrami o rozmiarze 3x3 i funkcją aktywacji relu.
layers.MaxPooling2D(), - Kolejna warstwa max pooling.
layers.Flatten(), - Warstwa, która spłaszcza wszystkie wymiary obrazu, aby stworzy

------------------

Wszystkie modele używają hyperparamterów :

Model1 -  filters=16, pool_size=2, dense_units=128
Model2 -  filters=32, pool_size=2, dense_units=64
Model3 -  filters=32, pool_size=2, dense_units=256
Model4 -  filters=16, pool_size=2, dense_units=128  + mniejsza ilość warst konwulacyjnych
Model5 - filters=16, pool_size=2, dense_units=128 + większa ilość warstw konwulacyjnych